
package com.elms.databaseservice.services;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.elms.databaseservice.models.StudentCourse;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

@Service
public class PdfGenerationService {

	private static String FILE = "FirstPdf.pdf";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 22, Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	private static Font italicFont=new Font(Font.FontFamily.TIMES_ROMAN, 18,Font.ITALIC);

	private static Logger log = LoggerFactory.getLogger(PdfGenerationService.class);

	public void createPdfViaIText(StudentCourse studentCourseDetails) throws FileNotFoundException, DocumentException {

		log.info("Creating PDF");
		Document document = new Document(PageSize.LETTER_LANDSCAPE);
		String studentName = studentCourseDetails.getStudentId().getStudentName();
		String courseName = studentCourseDetails.getCourseId().getCourseName();
		String certificateName = studentName + "." + courseName + ".pdf";
		PdfWriter.getInstance(document, new FileOutputStream(certificateName));
		document.open();
		addMetaData(document, studentCourseDetails);
		addTitlePage(document, studentCourseDetails);
		// addContent(document);
		document.close();
	}

	private static void addMetaData(Document document, StudentCourse studentCourse) {

		log.info("Adding MEta Data");
		document.addTitle("CERTIFICATE");
		document.addSubject(studentCourse.getCourseId().getCourseDescription());
		// document.addKeywords("Java, PDF, iText");
		document.addAuthor(studentCourse.getCourseId().getInstructorName());
		document.addCreator(studentCourse.getStudentId().getStudentName());
	}

	private static void addTitlePage(Document document, StudentCourse sc) throws DocumentException {

		
		Paragraph preface = new Paragraph("CERTIFICATE OF COMPLETION", catFont);
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("This certificate is presented to ",italicFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
//		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
//				smallBold));
//		addEmptyLine(preface, 3);
		preface.add(new Paragraph(sc.getStudentId().getStudentName(), subFont));

		addEmptyLine(preface, 3);
		preface.add(new Paragraph("To certify completion of "+sc.getCourseId().getCourseName()+" .", italicFont));
//		preface.add(new Paragraph(
//				"This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
//				redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

		private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
